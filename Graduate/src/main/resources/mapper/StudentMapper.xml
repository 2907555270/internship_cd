<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.txy.graduate.mapper.StudentMapper">
    <!--用于总览显示的学生基础信息-->
    <sql id="baseInfo">
        select student_id,
               student_name,
               student_dep,
               student_pre,
               student_class,
               if(student_status = 1, '已完成', '未完成') as 'finnish_status'
        from levelSchool.tb_student
    </sql>

    <!--查询学生的简介信息，用户搜索框的提示-->
    <sql id="student_profile">
        select id,
               student_id,
               student_name,
               student_class
        from levelSchool.tb_student
    </sql>


    <!--TODO:优化方向：暂时可以不优化
            1.采用多线程分页批量读取数据，并写入到同一个excel中

        TODO:现存问题：
            1.没有对数据进行按条件筛选查询
    -->
    <select id="selectAll" resultType="com.txy.graduate.domain.dto.StudentDTO">
        <include refid="baseInfo"/>;
    </select>

    <!--分页查询基础信息
        TODO:优化已完成：
            1.不使用MybatisPageHelper，在大数据的情况下，PageHelper会导致全表扫描
            2.利用主键id的聚集索引完成排序，通过id查询表数据
            3.两次使用聚集索引查询，避免全表扫描
        TODO:继续优化：
            1.数据量继续增大时，只能通过扩增sort_buffer_size，加速数据在内存中的排序
            2.sort_buffer_size官方建议：256kb-2MB,太大会在高并发的情况导致资源很快耗尽
    -->
    <select id="selectAllByPage" parameterType="com.txy.graduate.config.Page"
            resultType="com.txy.graduate.domain.dto.StudentDTO">
        <include refid="baseInfo"/>
        t,
            (select id from levelSchool.tb_student order by id limit #{start},#{pageSize}) a
        where t.id = a.id;
    </select>

    <!--分页查询时，统计总数：
        TODO:优化方向
            1.准确统计
            2.统计数量最好使用 count(*) 和 count(1);
            3. 其中count(*)是mysql特别优化过的，这两种方式的速度最快
    -->
    <select id="selectAmount" resultType="java.lang.Integer">
        select count(*)
        from levelSchool.tb_student;
    </select>

    <!--分页查询时，统计总数：
        TODO:优化方向：
            1.采用模糊统计,使用max(id)
        TODO:存在的问题：
            1.不够准确，但是在大数据的情况下，允许采用这种方式模糊统计
    -->
    <select id="selectAmountQuick" resultType="java.lang.Integer">
        select max(id)
        from levelSchool.tb_student;
    </select>

    <!--分页查询+多条件后缀模糊查询
        TODO:优化方向：
            1.和业务结合，固定模糊查询的条件
        TODO:存在的问题
            1.完全摒弃了Mybatis的封装，让开发变得麻烦
            2.可以在wrapper.insql()中替代PageHelper
    -->
    <select id="selectByConditionsAndPage" resultType="com.txy.graduate.domain.dto.StudentDTO">
        <include refid="baseInfo"/>
        t,
            (select id from levelSchool.tb_student order by id limit #{page.start},#{page.pageSize}) a
        where t.id = a.id
        <trim prefix="and" suffixOverrides="and">
            <if test="studentId != null and studentId != ''">
                student_id like concat(#{studentId}, '%')
                  and
            </if>
            <if test="studentName != null and studentName != ''">
                student_name like concat(#{studentName}, '%')
                  and
            </if>
            <if test="studentDep != null and studentDep != ''">
                student_dep like concat(#{studentDep}, '%')
                  and
            </if>
            <if test="studentPre != null and studentPre != ''">
                student_pre like concat(#{studentPre}, '%')
                  and
            </if>
            <if test="studentClass != null and studentClass != ''">
                student_class like concat(#{studentClass}, '%') and
            </if>
        </trim>
    </select>


    <!-- 根据输入内容，从学号和姓名两个角度给出提示
        TODO: 优化方向：
            1.使用union all 能够有效利用student_id和student_name对应的索引
            2.模糊查询时，只查询后半部分，前面不加%
        TODO: 待优化
            1.如何权衡索引的数量
            2.此处可以通过建立覆盖索引避免回表，但是对增删改操作会增加开销
            3.所以选择建立一个字段的二级索引，使其每次查询id后回表得到全部数据
    -->
    <select id="selectByIdOrName" parameterType="String" resultType="com.txy.graduate.domain.po.Student">
        <include refid="student_profile"/>
        where tb_student.student_id like concat(#{content}, '%')
        union all
        <include refid="student_profile"/>
        where tb_student.student_name like concat(#{content}, '%')
        limit 0,5;
    </select>


    <!--统计各个状态下的完成人数-->
    <select id="selectStatusCount" resultType="map">
        select count(*)                                'total',
               cast(sum(report_status) as unsigned)    'report',
               cast(sum(audit_status) as unsigned)     'graduation',
               cast(sum(owe_status) as unsigned)       'owe',
               cast(sum(book_status) as unsigned)      'book',
               cast(sum(archives_status) as unsigned)  'archive',
               cast(sum(dormitory_status) as unsigned) 'dormitory',
               cast(sum(diploma_status) as unsigned)   'diploma'
        from levelSchool.tb_student;
    </select>
    <!--统计各个备注状态的人数-->
    <select id="selectNoteCount" resultType="map">
        select cast(sum(report_note_status) as unsigned)    'report',
               cast(sum(audit_note_status) as unsigned)     'graduation',
               cast(sum(owe_note_status) as unsigned)       'owe',
               cast(sum(book_note_status) as unsigned)      'book',
               cast(sum(archives_note_status) as unsigned)  'archive',
               cast(sum(dormitory_note_status) as unsigned) 'dormitory',
               cast(sum(diploma_note_status) as unsigned)   'diploma'
        from levelSchool.tb_student;
    </select>

    <!--根据学号删除学生信息-->
    <delete id="deleteByStudentId" parameterType="long">
        delete
        from levelSchool.tb_student
        where student_id = #{student_id}
    </delete>

    <!--查询该学号的学生的id-->
    <select id="isExistedByStudentId" resultType="com.txy.graduate.domain.po.Student" parameterType="String">
        select id
        from levelSchool.tb_student
        where student_id = #{studentId}
    </select>

    <!--根据id查询某个学生的学号-->
    <select id="selectStudentIdById" resultType="java.lang.String">
        select student_id
        from levelSchool.tb_student
        where id = #{id}
    </select>
</mapper>